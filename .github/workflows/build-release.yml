name: build-release
on:
  push:
    branches:
      - '**'
    paths:
      - 'templates/**'
      - 'ui/**'
      - 'app.py'
      - 'api.py'
  pull_request:
    paths:
      - 'templates/**'
      - 'ui/**'
      - 'app.py'
      - 'api.py'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python: ['3.11']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: pyinstaller --clean -y app.spec

      # --- Windows packaging (ZIP using PowerShell Compress-Archive) ---
      - name: Package Windows (ZIP)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (Test-Path 'dist\FormGen-windows.zip') { Remove-Item 'dist\FormGen-windows.zip' -Force }
          $dir = 'dist\\FormGen'
          $exe = 'dist\\FormGen.exe'
          if (Test-Path $dir) {
            Compress-Archive -Path $dir -DestinationPath 'dist\FormGen-windows.zip' -Force
          } elseif (Test-Path $exe) {
            Compress-Archive -Path $exe -DestinationPath 'dist\FormGen-windows.zip' -Force
          } else {
            Get-ChildItem dist -Recurse | Format-List -Force | Out-String | Write-Output
            throw "PyInstaller output not found: expected 'dist\\FormGen' or 'dist\\FormGen.exe'"
          }

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: Windows-artifact
          path: dist/FormGen-windows.zip

      # --- macOS packaging (DMG via hdiutil) ---
      - name: Package macOS (DMG)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euxo pipefail
          APP_DIR="./dist/FormGen.app"
          if [ ! -e "$APP_DIR" ]; then
            # Fallback: if PyInstaller emitted onedir without BUNDLE, try folder
            ALT_APP="./dist/FormGen"
            if [ -d "$ALT_APP" ]; then APP_DIR="$ALT_APP"; else ls -laR ./dist; echo "No FormGen.app found"; exit 1; fi
          fi
          hdiutil create -volname 'FormGen' -srcfolder "$APP_DIR" -ov -format UDZO 'dist/FormGen-macos.dmg'

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macOS-artifact
          path: dist/FormGen-macos.dmg

  release:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/FormGen-windows.zip
            artifacts/**/FormGen-macos.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
